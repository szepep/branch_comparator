/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.psz.viewer;

import com.psz.viewer.logic.ComparatorNode;
import java.awt.BorderLayout;
import java.util.prefs.Preferences;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.NbPreferences;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.psz.viewer//Explorer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ExplorerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "com.psz.viewer.ExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ExplorerAction",
        preferredID = "ExplorerTopComponent"
)
@Messages({
    "CTL_ExplorerAction=Explorer",
    "CTL_ExplorerTopComponent=Explorer Window",
    "HINT_ExplorerTopComponent=This is a Explorer window"
})
public final class ExplorerTopComponent extends TopComponent implements ExplorerManager.Provider {

    private static final String SRC = "srcPathe";
    private static final String TARGET = "targetPathe";

    private final Preferences preferences = NbPreferences.forModule(ExplorerTopComponent.class);
    private final ExplorerManager mgr = new ExplorerManager();
    private final BeanTreeView beanTreeView;

    public ExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_ExplorerTopComponent());
        setToolTipText(Bundle.HINT_ExplorerTopComponent());

        associateLookup(ExplorerUtils.createLookup(mgr, getActionMap()));

        srcTF.setText(preferences.get(SRC, ""));
        targetTF.setText(preferences.get(TARGET, ""));

        explorerP.setLayout(new BorderLayout());
        beanTreeView = new BeanTreeView();
        explorerP.add(beanTreeView, BorderLayout.CENTER);

        mgr.setRootContext(new AbstractNode(Children.LEAF));
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        srcL = new javax.swing.JLabel();
        targetL = new javax.swing.JLabel();
        srcTF = new javax.swing.JTextField();
        targetTF = new javax.swing.JTextField();
        compareB = new javax.swing.JToggleButton();
        explorerP = new javax.swing.JPanel();

        org.openide.awt.Mnemonics.setLocalizedText(srcL, org.openide.util.NbBundle.getMessage(ExplorerTopComponent.class, "ExplorerTopComponent.srcL.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(targetL, org.openide.util.NbBundle.getMessage(ExplorerTopComponent.class, "ExplorerTopComponent.targetL.text")); // NOI18N

        srcTF.setText(org.openide.util.NbBundle.getMessage(ExplorerTopComponent.class, "ExplorerTopComponent.srcTF.text")); // NOI18N

        targetTF.setText(org.openide.util.NbBundle.getMessage(ExplorerTopComponent.class, "ExplorerTopComponent.targetTF.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(compareB, org.openide.util.NbBundle.getMessage(ExplorerTopComponent.class, "ExplorerTopComponent.compareB.text")); // NOI18N
        compareB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compareBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout explorerPLayout = new javax.swing.GroupLayout(explorerP);
        explorerP.setLayout(explorerPLayout);
        explorerPLayout.setHorizontalGroup(
            explorerPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        explorerPLayout.setVerticalGroup(
            explorerPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 197, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(explorerP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(srcL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(srcTF, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(targetL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(targetTF))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(compareB)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(srcL)
                    .addComponent(srcTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(targetL)
                    .addComponent(targetTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(compareB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(explorerP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void compareBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compareBActionPerformed
        preferences.put(SRC, srcTF.getText());
        preferences.put(TARGET, targetTF.getText());

        ComparatorNode node = ComparatorNode.create(srcTF.getText(), targetTF.getText());
        mgr.setRootContext(node);
        beanTreeView.expandAll();
    }//GEN-LAST:event_compareBActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton compareB;
    private javax.swing.JPanel explorerP;
    private javax.swing.JLabel srcL;
    private javax.swing.JTextField srcTF;
    private javax.swing.JLabel targetL;
    private javax.swing.JTextField targetTF;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return mgr;
    }
}
